diff --git a/Native/BuildResources/LinBuild/ServerControl/control b/Native/BuildResources/LinBuild/ServerControl/control
index c31374bb..bbaf0974 100644
--- a/Native/BuildResources/LinBuild/ServerControl/control
+++ b/Native/BuildResources/LinBuild/ServerControl/control
@@ -3,11 +3,11 @@ Version: ${serverversion}
 Section: misc
 Priority: optional
 Architecture: all
-Depends: apache2, postgresql-9.5, postgis, postgresql-contrib-9.5, postgresql-server-dev-9.5, php, libapache2-mod-php, php-pgsql, php7.0-mbstring, php7.0-xml, php7.0-zip, php-curl, php-common, expect, openjdk-8-jdk
+Depends: apache2, postgresql-9.6, postgis, postgresql-contrib-9.6, postgresql-server-dev-9.6, php, libapache2-mod-php, php-pgsql, php7.0-mbstring, php7.0-xml, php7.0-zip, php-curl, php-common, expect, openjdk-8-jdk
 Suggests: openssh-server, pgadmin3, tellervo
 Replaces: [[name]]-server (<<${serverversion})
 Maintainer: Peter Brewer <p.brewer@ltrr.arizona.edu>
 Description: Database and webservice for the Tellervo dendrochronology desktop application
  The Tellervo server provides a PHP/PostgreSQL-based web service for managing dendrochronology
- samples, data and metadata alongside the Tellervo desktop application.  
-Distribution: development
\ No newline at end of file
+ samples, data and metadata alongside the Tellervo desktop application.
+Distribution: development
diff --git a/Native/BuildResources/LinBuild/ServerControl/postinst b/Native/BuildResources/LinBuild/ServerControl/postinst
index 1b90a8d9..9f44193b 100755
--- a/Native/BuildResources/LinBuild/ServerControl/postinst
+++ b/Native/BuildResources/LinBuild/ServerControl/postinst
@@ -5,7 +5,7 @@ echo "Postinst run ${serverversion} with $1 argument " >> /var/log/tellervo-inst
 date '+%R.%S' >> /var/log/tellervo-installation.log
 echo "*******************" >> /var/log/tellervo-installation.log
 
-   
+
 if [ $1 = 'configure' ]; then
 
 	  ## echo "Number of args passed = "
@@ -15,141 +15,124 @@ if [ $1 = 'configure' ]; then
 	  ## echo "Arg 2 = " $2
 	  ## echo "Arg 3 = " $3
 
-	   if [[ $2 ]]  
+	   if [[ $2 ]]
 	    then
 	      ##
 	      ##  Three args given so...
 	      ##  Configure being run during upgrade sequence
 	      ##
-	      
-	      
+
+
 	      if [ -e "/usr/share/tellervo-server/config.bak" ]
 	       then
 	      		echo "Reinstating config.php from previous installation" >> /var/log/tellervo-installation.log
 	      		cp /usr/share/tellervo-server/config.bak /var/www/tellervo/config.php
 	      fi
-	      
-	      
-	      
+
+
+
 	      ##
-	      ## Steps required to upgrade specific previous versions      
+	      ## Steps required to upgrade specific previous versions
 	      ##
-	      
-	      if [[ "$2"="1.0.9"  || "$2"="1.1.0" || "$2"="1.1.1" ]]
+
+	      if [[ "$2" = "1.0.9"  || "$2" = "1.1.0" || "$2" = "1.1.1" ]]
 	       then
 	       	if [ -e "/var/www/tellervo/config.php" ]
-	       	 then 
-	       
-	       
+	       	 then
+
+
 	      	echo "Upgrading config file" >> /var/log/tellervo-installation.log
-	      	
-			echo "<?php 
+
+			echo "<?php
 /**
  * Additional settings added when upgraded from v. $2
  */
- 
+
  // IP address of this server
  \$ip = \$hostname;
- 
+
  // Length of time a login is valid for in seconds. (1800 = 30mins)
  \$timeout = 2700;
- ?>" >> /var/www/tellervo/config.php	      	    	
-			fi			
+ ?>" >> /var/www/tellervo/config.php
+			fi
 	      fi
-	      
-	      
+
 	      ##
 	      ## Remaining steps required no matter what the previous version was
 	      ##
-	      
-	      if [ -e "/usr/lib/postgresql/9.5/lib/libpljava-so-1.6.0-SNAPSHOT.so" ]
+
+	      if [ -e "/usr/lib/postgresql/9.6/lib/libpljava-so-1.5.1-SNAPSHOT.so" ]
 	        then
 	          echo "PLJava already installed... skipping" >> /var/log/tellervo-installation.log
 	        else
 	          echo "Installing PLJava binary" >> /var/log/tellervo-installation.log
-	          
-	          bits="$(getconf LONG_BIT)"
-	          if [ "$bits" = '64' ]; then
-	             ln -fs /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so /usr/share/tellervo-server/libjvm.so
-	             java -jar /usr/share/tellervo-server/pljava-pg9.5-amd64-Linux-gpp.jar
-	          else
-	             ln -fs /usr/lib/jvm/java-8-openjdk-i386/jre/lib/i386/server/libjvm.so /usr/share/tellervo-server/libjvm.so
-	             java -jar /usr/share/tellervo-server/pljava-pg9.5-i386-Linux-gpp.jar
-	          fi
-	      	  
+            ln -fs /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so /usr/share/tellervo-server/libjvm.so
+            java -jar /usr/share/tellervo-server/pljava-pg9.6-amd64-Linux-gpp.jar
 	      fi
-	      
-	      
+
 	      if [ -e "/var/www/tellervo/config.php" ]
-	       then     
+	       then
 
 		      echo "Running database upgrade scripts" >> /var/log/tellervo-installation.log
 		      /usr/bin/tellervo-server --upgrade-db
-		      
+
 		      echo "Regenerating systemconfig.php" >> /var/log/tellervo-installation.log
 		      /usr/bin/tellervo-server --sysconfig
-		      
+
 		      echo "Testing configuration" >> /var/log/tellervo-installation.log
 		      /usr/bin/tellervo-server --test
-		      
+
 		      echo "Removing backup config file" >> /var/log/tellervo-installation.log
 		      rm /usr/share/tellervo-server/config.bak
-		      
+
 		  else
 		  	  ## No config file present, so configure as new installation
 		  	  #/usr/bin/tellervo-server --configure
-		  	  
+
 		  	  echo "You need to configure your Tellervo Server by running as root/sudo: "
 		  	  echo "tellervo-server --configure"
 	   	  fi
-  
-  
-  
-  
-  
+
+
+
+
+
       else
-      
+
       	    ##
 	      	##  Configure being run on a new installation
 	      	##
-      
+
             echo "Configuring new installation" >> /var/log/tellervo-installation.log
-            
-            if [ -e "/usr/lib/postgresql/9.5/lib/libpljava-so-1.6.0-SNAPSHOT.so" ]
+
+            if [ -e "/usr/lib/postgresql/9.6/lib/libpljava-so-1.5.1-SNAPSHOT.so" ]
 	        then
 	          echo "PLJava already installed... skipping" >> /var/log/tellervo-installation.log
 	        else
 	          echo "Installing PLJava binary" >> /var/log/tellervo-installation.log
-	          
-	      	  bits="$(getconf LONG_BIT)"
-	          if [ "$bits" = '64' ]; then
-	             ln -fs /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so /usr/share/tellervo-server/libjvm.so
-	             java -jar /usr/share/tellervo-server/pljava-pg9.5-amd64-Linux-gpp.jar
-	          else
-	             ln -fs /usr/lib/jvm/java-8-openjdk-i386/jre/lib/i386/server/libjvm.so /usr/share/tellervo-server/libjvm.so
-	             java -jar /usr/share/tellervo-server/pljava-pg9.5-i386-Linux-gpp.jar
-	          fi
+	          ln -fs /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/libjvm.so /usr/share/tellervo-server/libjvm.so
+	             java -jar /usr/share/tellervo-server/pljava-pg9.6-amd64-Linux-gpp.jar
 	        fi
-            
-            
+
+
      		#/usr/bin/tellervo-server --configure
      		echo "You need to configure your Tellervo Server by running as root/sudo: "
 		  	echo "tellervo-server --configure"
       fi
-      
-      
+
+
       ##
-      ##  Ensure mod_rewrite is enable for ODK 
+      ##  Ensure mod_rewrite is enable for ODK
       ##
       a2enmod rewrite
       service postgresql restart
       service apache2 restart
-      
-      
 
 
- 
-      
+
+
+
+
 #elif [ $1 = 'abort-upgrade' ]; then
 
 #elif [ $1 = 'abort-remove' ]; then
diff --git a/Native/BuildResources/LinBuild/tellervo-server b/Native/BuildResources/LinBuild/tellervo-server
index 521504f0..67fe30df 100755
--- a/Native/BuildResources/LinBuild/tellervo-server
+++ b/Native/BuildResources/LinBuild/tellervo-server
@@ -66,8 +66,8 @@ $user 			  = "tellervo";
 $pwd 			  = "";
 $wsurl 			  = "";
 $errorsFound 	  = FALSE;
-$postgresversion  = "9.5";
-$postgisversion   = "2.2";
+$postgresversion  = "9.6";
+$postgisversion   = "2.3";
 $folderbase       = "/usr/share/tellervo-server/";
 $pg_hba_file      = "/etc/postgres/?";  // set later
 $pg_hba_file_orig = "/etc/postgres/?"; // set later
diff --git a/pom.xml b/pom.xml
index e4e4ee5d..ea73ff6b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -130,10 +130,10 @@
 		<serverversion>1.3.3</serverversion>
 	</properties>
 
-	<!-- Repository to deploy to. When deploying make sure your .m2/settings.xml 
+	<!-- Repository to deploy to. When deploying make sure your .m2/settings.xml
 		file contains the correct username and password for the repository server -->
-	<!-- <distributionManagement> <repository> <id>tridas-releases</id> <url>http://maven.tridas.org/repository/tridas-releases/</url> 
-		</repository> <snapshotRepository> <id>tridas-snapshots</id> <url>http://maven.tridas.org/repository/tridas-snapshots/</url> 
+	<!-- <distributionManagement> <repository> <id>tridas-releases</id> <url>http://maven.tridas.org/repository/tridas-releases/</url>
+		</repository> <snapshotRepository> <id>tridas-snapshots</id> <url>http://maven.tridas.org/repository/tridas-snapshots/</url>
 		</snapshotRepository> </distributionManagement> -->
 
 	<!-- Packages that this project depends upon -->
@@ -169,9 +169,9 @@
 			<version>5.0.6</version>
 		</dependency>
 		<!-- Logger -->
-		<!-- Diverts System.out calls to logger can be removed once code has been 
+		<!-- Diverts System.out calls to logger can be removed once code has been
 			refactored to use proper logger calls -->
-		<!-- <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId> 
+		<!-- <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-log4j12</artifactId>
 			<version>1.6.1</version> <type>jar</type> <scope>compile</scope> </dependency> -->
 		<dependency>
 			<groupId>org.jdom</groupId>
@@ -371,12 +371,12 @@
 	<profiles>
 		<profile>
 
-			<!-- This profile should be used to create the Windows, Linux and MacOSX 
-				binaries. It requries the Install4j (closed-sourced) application as well 
-				as access to the appropriate code signing certificate. As such it is not 
-				run by default. The following keys must be set in your .m2/settings.xml file: 
-				- install4jc.binary - Absolute path to the install4jc binary - pkcs12.filename 
-				- Absolute path to the PKCS12 certificate file - cert.password - Password 
+			<!-- This profile should be used to create the Windows, Linux and MacOSX
+				binaries. It requries the Install4j (closed-sourced) application as well
+				as access to the appropriate code signing certificate. As such it is not
+				run by default. The following keys must be set in your .m2/settings.xml file:
+				- install4jc.binary - Absolute path to the install4jc binary - pkcs12.filename
+				- Absolute path to the PKCS12 certificate file - cert.password - Password
 				to unlock PKCS12 certificate file -->
 
 			<id>binaries</id>
@@ -387,27 +387,27 @@
 			<build>
 				<plugins>
 
-					<!-- Create a MacOSX native executable n.b. on Linux and Windows this 
-						will create an *app.zip file on MacOSX it will also create a DMG file. Also 
-						note that on Linux and Windows computers the App will not include the Apple 
+					<!-- Create a MacOSX native executable n.b. on Linux and Windows this
+						will create an *app.zip file on MacOSX it will also create a DMG file. Also
+						note that on Linux and Windows computers the App will not include the Apple
 						integration portions therefore they will have an ugly menu bar. -->
 					<!-- handled by install4j now -->
-					<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId> 
-						<version>1.0-alpha-2</version> <configuration> <mainClass>org.tellervo.desktop.gui.Startup</mainClass> 
-						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <jvmVersion>1.5+</jvmVersion> 
-						<bundleName>${project.name}</bundleName> <javaApplicationStub>Native/BuildResources/MacBuild/JavaApplicationStub</javaApplicationStub> 
-						</configuration> <executions> <execution> <phase>package</phase> <goals> 
-						<goal>bundle</goal> </goals> </execution> </executions> </plugin> <plugin> 
-						<groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId> 
-						<version>1.0-alpha-2</version> <configuration> <additionalResources> <fileSet> 
-						<directory>src/main/resources/Licenses</directory> <includes> <include>license.txt</include> 
-						</includes> </fileSet> <fileSet> <directory>Documentation/</directory> <includes> 
-						<include>tellervo-manual.pdf</include> </includes> </fileSet> <fileSet> <directory>${project.build.directory}/classes/MacBuild</directory> 
-						<includes> <include>Tellervo Drivers.pkg</include> </includes> </fileSet> 
-						</additionalResources> <bundleName>Tellervo</bundleName> <zipFile>${project.build.directory}/mac-app.zip</zipFile> 
-						<mainClass>org.tellervo.desktop.gui.Startup</mainClass> <jvmVersion>1.5+</jvmVersion> 
-						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <javaApplicationStub>${project.build.directory}/classes/MacBuild/JavaApplicationStub</javaApplicationStub> 
-						</configuration> <executions> <execution> <phase>package</phase> <goals> 
+					<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId>
+						<version>1.0-alpha-2</version> <configuration> <mainClass>org.tellervo.desktop.gui.Startup</mainClass>
+						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <jvmVersion>1.5+</jvmVersion>
+						<bundleName>${project.name}</bundleName> <javaApplicationStub>Native/BuildResources/MacBuild/JavaApplicationStub</javaApplicationStub>
+						</configuration> <executions> <execution> <phase>package</phase> <goals>
+						<goal>bundle</goal> </goals> </execution> </executions> </plugin> <plugin>
+						<groupId>org.codehaus.mojo</groupId> <artifactId>osxappbundle-maven-plugin</artifactId>
+						<version>1.0-alpha-2</version> <configuration> <additionalResources> <fileSet>
+						<directory>src/main/resources/Licenses</directory> <includes> <include>license.txt</include>
+						</includes> </fileSet> <fileSet> <directory>Documentation/</directory> <includes>
+						<include>tellervo-manual.pdf</include> </includes> </fileSet> <fileSet> <directory>${project.build.directory}/classes/MacBuild</directory>
+						<includes> <include>Tellervo Drivers.pkg</include> </includes> </fileSet>
+						</additionalResources> <bundleName>Tellervo</bundleName> <zipFile>${project.build.directory}/mac-app.zip</zipFile>
+						<mainClass>org.tellervo.desktop.gui.Startup</mainClass> <jvmVersion>1.5+</jvmVersion>
+						<iconFile>src/main/resources/Icons/tellervo-application.icns</iconFile> <javaApplicationStub>${project.build.directory}/classes/MacBuild/JavaApplicationStub</javaApplicationStub>
+						</configuration> <executions> <execution> <phase>package</phase> <goals>
 						<goal>bundle</goal> </goals> </execution> </executions> </plugin> -->
 
 
@@ -421,17 +421,17 @@
 
 
 							<!-- Desktop Installer -->
-							<!-- <execution> <id>deb-desktop-build</id> <phase>package</phase> 
-								<goals> <goal>jdeb</goal> </goals> <configuration> <deb>${project.build.directory}/binaries/desktop/${project.version}/Linux/${project.build.finalName}.deb</deb> 
-								<controlDir>${project.build.directory}/classes/LinBuild/DesktopControl/</controlDir> 
-								<dataSet> <data> <src>${project.build.directory}/${project.build.finalName}.jar</src> 
-								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/tellervo</prefix> 
-								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo</src> 
-								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/bin/</prefix> <filemode>755</filemode> 
-								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo.desktop</src> 
-								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/applications/</prefix> 
-								<filemode>755</filemode> </mapper> </data> <data> <src>src/main/resources/Icons/256x256/tellervo-application.png</src> 
-								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/pixmaps/</prefix> 
+							<!-- <execution> <id>deb-desktop-build</id> <phase>package</phase>
+								<goals> <goal>jdeb</goal> </goals> <configuration> <deb>${project.build.directory}/binaries/desktop/${project.version}/Linux/${project.build.finalName}.deb</deb>
+								<controlDir>${project.build.directory}/classes/LinBuild/DesktopControl/</controlDir>
+								<dataSet> <data> <src>${project.build.directory}/${project.build.finalName}.jar</src>
+								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/tellervo</prefix>
+								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo</src>
+								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/bin/</prefix> <filemode>755</filemode>
+								</mapper> </data> <data> <src>${project.build.directory}/classes/LinBuild/tellervo.desktop</src>
+								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/applications/</prefix>
+								<filemode>755</filemode> </mapper> </data> <data> <src>src/main/resources/Icons/256x256/tellervo-application.png</src>
+								<type>file</type> <mapper> <type>perm</type> <prefix>/usr/share/pixmaps/</prefix>
 								</mapper> </data> </dataSet> </configuration> </execution> -->
 
 							<!-- Server installer -->
@@ -443,7 +443,7 @@
 								</goals>
 								<configuration>
 									<deb>${project.build.directory}/binaries/server/${serverversion}/Linux/tellervo-server-${serverversion}.deb</deb>
-									<controlDir>${project.build.directory}/classes/</controlDir>
+									<controlDir>${basedir}/target/debservercontrol</controlDir>
 									<dataSet>
 										<data>
 											<src>Native/BuildResources/LinBuild/tellervo-server</src>
@@ -490,16 +490,7 @@
 											</mapper>
 										</data>
 										<data>
-											<src>Native/BuildResources/LinBuild/pljava-pg9.5-i386-Linux-gpp.jar</src>
-											<type>file</type>
-											<mapper>
-												<type>perm</type>
-												<prefix>/usr/share/tellervo-server/</prefix>
-												<filemode>755</filemode>
-											</mapper>
-										</data>
-										<data>
-											<src>Native/BuildResources/LinBuild/pljava-pg9.5-amd64-Linux-gpp.jar</src>
+											<src>Native/BuildResources/LinBuild/pljava-pg9.6-amd64-Linux-gpp.jar</src>
 											<type>file</type>
 											<mapper>
 												<type>perm</type>
@@ -562,39 +553,6 @@
 						</executions>
 					</plugin>
 
-					<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
-						running Ant instead -->
-					<plugin>
-						<artifactId>maven-antrun-plugin</artifactId>
-						<version>1.3</version>
-						<executions>
-
-							<execution>
-								<id>Install4J</id>
-								<phase>package</phase>
-								<configuration>
-									<tasks>
-										<taskdef resource="net/sf/antcontrib/antcontrib.properties"
-											classpathref="maven.plugin.classpath" />
-										<!-- <exec dir="${project.build.directory}" executable="/home/pbrewer/bin/install4j6/bin/install4jc"> -->
-										<exec dir="${project.build.directory}" executable="${install4jc.binary}">
-
-											<arg value="--win-keystore-password" />
-											<arg value="${cert.password}" />
-											<arg value="--mac-keystore-password" />
-											<arg value="${cert.password}" />
-											<arg value="${project.build.directory}/classes/tellervo.install4j" />
-										</exec>
-									</tasks>
-								</configuration>
-								<goals>
-									<goal>run</goal>
-								</goals>
-							</execution>
-
-						</executions>
-
-					</plugin>
 				</plugins>
 			</build>
 		</profile>
@@ -640,7 +598,7 @@
 				<plugins>
 
 
-					<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
+					<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by
 						running Ant instead -->
 					<plugin>
 						<artifactId>maven-antrun-plugin</artifactId>
@@ -665,7 +623,7 @@
 													<arg value="-tsa" />
 													<arg value="http://tsa.starfieldtech.com" />
 													<arg value="-keystore" />
-													<!-- <arg value="/home/pbrewer/.ssh/pwb_code_signing_2014.p12" 
+													<!-- <arg value="/home/pbrewer/.ssh/pwb_code_signing_2014.p12"
 														/> -->
 													<arg value="${pkcs12.filename}" />
 													<arg value="-storepass" />
@@ -750,11 +708,9 @@
 				</includes>
 				<excludes>
 					<exclude>**/tellervo-server</exclude>
-					<exclude>**/create-tellervo-instance</exclude>		
+					<exclude>**/create-tellervo-instance</exclude>
 					<exclude>**/tellervo-apache.conf</exclude>
-					<exclude>**/pljava-pg-9.5-amd64-Linux-gpp.jar</exclude>
-					<exclude>**/pljava-pg-9.5-i386-Linux-gpp.jar</exclude>		
-							
+					<exclude>**/pljava-pg9.6-amd64-Linux-gpp.jar</exclude>
 				</excludes>
 			</resource>
 			<resource>
@@ -764,24 +720,18 @@
 					<include>**/tellervo-server</include>
 					<include>**/create-tellervo-instance</include>
 					<include>**/tellervo-apache.conf</include>
-					<include>**/pljava-pg-9.5-amd64-Linux-gpp.jar</include>
-					<include>**/pljava-pg-9.5-i386-Linux-gpp.jar</include>
+					<include>**/pljava-pg9.6-amd64-Linux-gpp.jar</include>
 				</includes>
 				<excludes>
 					<exclude>**/tellervo.desktop</exclude>
 				</excludes>
 			</resource>
-			
-			<resource>
-				<directory>Native/BuildResources/LinBuild/ServerControl</directory>
-				<filtering>true</filtering>
-			</resource>
-			
+
 			<resource>
 				<directory>Native/BuildResources/Docker</directory>
 				<filtering>false</filtering>
 			</resource>
-			
+
 			<resource>
 				<directory>src/main/resources</directory>
 				<filtering>false</filtering>
@@ -907,6 +857,24 @@
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-resources-plugin</artifactId>
 				<version>2.5</version>
+				<executions>
+					<execution>
+						<id>copy-resources</id>
+						<phase>validate</phase>
+						<goals>
+							<goal>copy-resources</goal>
+						</goals>
+						<configuration>
+							<outputDirectory>${basedir}/target/debservercontrol</outputDirectory>
+							<resources>
+								<resource>
+									<directory>Native/BuildResources/LinBuild/ServerControl</directory>
+									<filtering>true</filtering>
+								</resource>
+							</resources>
+						</configuration>
+					</execution>
+				</executions>
 			</plugin>
 
 			<!-- Reconfigure "clean" in Maven not to delete target directory -->
@@ -997,13 +965,13 @@
 
 
 			<!-- Use shade to create a single jar containing all the dependencies -->
-			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId> 
-				<version>1.3.3</version> <executions> <execution> <id>clientjar</id> <phase>package</phase> 
-				<goals> <goal>shade</goal> </goals> <configuration> <transformers> <transformer 
-				implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"> 
-				<mainClass>org.tellervo.desktop.gui.Startup</mainClass> </transformer> </transformers> 
-				<filters> <filter> <artifact>*:*</artifact> <excludes> <exclude>META-INF/*.SF</exclude> 
-				<exclude>META-INF/*.DSA</exclude> <exclude>META-INF/*.RSA</exclude> </excludes> 
+			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId>
+				<version>1.3.3</version> <executions> <execution> <id>clientjar</id> <phase>package</phase>
+				<goals> <goal>shade</goal> </goals> <configuration> <transformers> <transformer
+				implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+				<mainClass>org.tellervo.desktop.gui.Startup</mainClass> </transformer> </transformers>
+				<filters> <filter> <artifact>*:*</artifact> <excludes> <exclude>META-INF/*.SF</exclude>
+				<exclude>META-INF/*.DSA</exclude> <exclude>META-INF/*.RSA</exclude> </excludes>
 				</filter> </filters> </configuration> </execution> </executions> </plugin> -->
 
 
@@ -1025,7 +993,7 @@
 				</executions>
 			</plugin>
 
-			<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by 
+			<!-- Nasty kludge fixes. Tasks that Maven can not perform are done by
 				running Ant instead -->
 			<plugin>
 				<artifactId>maven-antrun-plugin</artifactId>
@@ -1033,7 +1001,7 @@
 				<executions>
 
 
-					<!-- Delete the duplicate TRiDaS and GML classes produced by JAXB when 
+					<!-- Delete the duplicate TRiDaS and GML classes produced by JAXB when
 						creating the Tellervo classes. -->
 					<execution>
 						<id>DeleteDuplicateJAXBClasses</id>
@@ -1057,54 +1025,54 @@
 
 
 
-					<!-- Strip duplicate deps from MacOSX bundle, and add native libraries 
+					<!-- Strip duplicate deps from MacOSX bundle, and add native libraries
 						manual and license files. Finally zip up and move into binaries folder -->
-					<!-- <execution> <id>AddLibsToMacOSXApp</id> <phase>package</phase> 
-						<configuration> <tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties" 
-						classpathref="maven.plugin.classpath"/> <trycatch> <try> <echo> MKDIR ${project.build.directory}/binaries/desktop/${project.version}/MacOSX 
-						</echo> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/MacOSX"/> 
-						<echo> Delete dependencies from JAR: ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo</echo> 
-						<delete dir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo"/> 
-						<echo>Copy JAR into the build folder</echo> <echo>File: ${project.build.directory}/${project.build.finalName}.jar... 
-						into ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/</echo> 
-						<copy file="${project.build.directory}/${project.build.finalName}.jar" todir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/"/> 
-						<echo>Delete any previous OSX package</echo> <delete file="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
-						failonerror="false"/> <echo>Create the app.zip file from our build folder. 
-						555 filemode required for executing</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
-						update="false"> <zipfileset filemode="555" dir="${project.build.directory}/${project.build.finalName}" 
-						includes="Tellervo.app/**"/> </zip> <echo>Add license, manual and native 
-						package into the root of the zip</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip" 
-						update="true"> <fileset dir="Native/BuildResources/MacBuild/NativePackages/" 
-						includes="**/*.pkg"/> <fileset dir="${project.build.directory}/classes/Licenses/" 
-						includes="**/license.txt"/> <fileset dir="Documentation" includes="**/tellervo-manual.pdf"/> 
-						</zip> </try> <catch> <echo>*********************************</echo> <echo> 
-						UNABLE TO COMPLETE THIS TASK </echo> <echo> Error building MacOSX pacakage 
-						</echo> <echo>*********************************</echo> <sleep seconds="5"/> 
-						</catch> </trycatch> </tasks> </configuration> <goals> <goal>run</goal> </goals> 
+					<!-- <execution> <id>AddLibsToMacOSXApp</id> <phase>package</phase>
+						<configuration> <tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties"
+						classpathref="maven.plugin.classpath"/> <trycatch> <try> <echo> MKDIR ${project.build.directory}/binaries/desktop/${project.version}/MacOSX
+						</echo> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/MacOSX"/>
+						<echo> Delete dependencies from JAR: ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo</echo>
+						<delete dir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo"/>
+						<echo>Copy JAR into the build folder</echo> <echo>File: ${project.build.directory}/${project.build.finalName}.jar...
+						into ${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/</echo>
+						<copy file="${project.build.directory}/${project.build.finalName}.jar" todir="${project.build.directory}/${project.build.finalName}/Tellervo.app/Contents/Resources/Java/repo/org/tellervo/tellervo/${project.version}/"/>
+						<echo>Delete any previous OSX package</echo> <delete file="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip"
+						failonerror="false"/> <echo>Create the app.zip file from our build folder.
+						555 filemode required for executing</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip"
+						update="false"> <zipfileset filemode="555" dir="${project.build.directory}/${project.build.finalName}"
+						includes="Tellervo.app/**"/> </zip> <echo>Add license, manual and native
+						package into the root of the zip</echo> <zip destfile="${project.build.directory}/binaries/desktop/${project.version}/MacOSX/${project.build.finalName}.zip"
+						update="true"> <fileset dir="Native/BuildResources/MacBuild/NativePackages/"
+						includes="**/*.pkg"/> <fileset dir="${project.build.directory}/classes/Licenses/"
+						includes="**/license.txt"/> <fileset dir="Documentation" includes="**/tellervo-manual.pdf"/>
+						</zip> </try> <catch> <echo>*********************************</echo> <echo>
+						UNABLE TO COMPLETE THIS TASK </echo> <echo> Error building MacOSX pacakage
+						</echo> <echo>*********************************</echo> <sleep seconds="5"/>
+						</catch> </trycatch> </tasks> </configuration> <goals> <goal>run</goal> </goals>
 						</execution> -->
 
 
 					<!-- Run Makensis to create the windows installers -->
-					<!-- <execution> <id>RunNSIS</id> <phase>package</phase> <configuration> 
-						<tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath"/> 
-						<trycatch> <try> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/Windows"/> 
-						<exec dir="${project.build.directory}/classes/WinBuild" executable="makensis"> 
-						<arg value="main.nsh"/> </exec> <copy file="${project.build.directory}/${project.build.finalName}-unsigned.exe" 
-						tofile="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe" 
-						failonerror="false"/> </try> <catch> <echo>**********************************************</echo> 
-						<echo> UNABLE TO COMPLETE THIS TASK </echo> <echo> makensis is not available 
-						on this computer </echo> <echo> Windows installer package will not be created</echo> 
-						<echo>**********************************************</echo> <sleep seconds="5"/> 
-						</catch> </trycatch> <trycatch> <try> <exec dir="${project.build.directory}" 
-						executable="osslsigncode"> <arg value="sign"/> <arg value="-certs"/> <arg 
-						value="/home/pbrewer/.ssh/cert.pem"/> <arg value="-key"/> <arg value="/home/pbrewer/.ssh/key.pem"/> 
-						<arg value="-n"/> <arg value="Tellervo"/> <arg value="-t"/> <arg value="http://tsa.starfieldtech.com/"/> 
-						<arg value="-i"/> <arg value="http://www.tellervo.org"/> <arg value="-in"/> 
-						<arg value="${project.build.directory}/${project.build.finalName}-unsigned.exe"/> 
-						<arg value="-out"/> <arg value="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe"/> 
-						</exec> </try> <catch> <echo>**********************************************</echo> 
-						<echo> UNABLE TO SIGN Windows executable </echo> <echo>**********************************************</echo> 
-						<sleep seconds="5"/> </catch> </trycatch> </tasks> </configuration> <goals> 
+					<!-- <execution> <id>RunNSIS</id> <phase>package</phase> <configuration>
+						<tasks> <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="maven.plugin.classpath"/>
+						<trycatch> <try> <mkdir dir="${project.build.directory}/binaries/desktop/${project.version}/Windows"/>
+						<exec dir="${project.build.directory}/classes/WinBuild" executable="makensis">
+						<arg value="main.nsh"/> </exec> <copy file="${project.build.directory}/${project.build.finalName}-unsigned.exe"
+						tofile="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe"
+						failonerror="false"/> </try> <catch> <echo>**********************************************</echo>
+						<echo> UNABLE TO COMPLETE THIS TASK </echo> <echo> makensis is not available
+						on this computer </echo> <echo> Windows installer package will not be created</echo>
+						<echo>**********************************************</echo> <sleep seconds="5"/>
+						</catch> </trycatch> <trycatch> <try> <exec dir="${project.build.directory}"
+						executable="osslsigncode"> <arg value="sign"/> <arg value="-certs"/> <arg
+						value="/home/pbrewer/.ssh/cert.pem"/> <arg value="-key"/> <arg value="/home/pbrewer/.ssh/key.pem"/>
+						<arg value="-n"/> <arg value="Tellervo"/> <arg value="-t"/> <arg value="http://tsa.starfieldtech.com/"/>
+						<arg value="-i"/> <arg value="http://www.tellervo.org"/> <arg value="-in"/>
+						<arg value="${project.build.directory}/${project.build.finalName}-unsigned.exe"/>
+						<arg value="-out"/> <arg value="${project.build.directory}/binaries/desktop/${project.version}/Windows/${project.build.finalName}-setup.exe"/>
+						</exec> </try> <catch> <echo>**********************************************</echo>
+						<echo> UNABLE TO SIGN Windows executable </echo> <echo>**********************************************</echo>
+						<sleep seconds="5"/> </catch> </trycatch> </tasks> </configuration> <goals>
 						<goal>run</goal> </goals> </execution> -->
 
 
@@ -1165,7 +1133,7 @@
 
 		<pluginManagement>
 			<plugins>
-				<!--This plugin's configuration is used to store Eclipse m2e settings 
+				<!--This plugin's configuration is used to store Eclipse m2e settings
 					only. It has no influence on the Maven build itself. -->
 				<plugin>
 					<groupId>org.eclipse.m2e</groupId>
